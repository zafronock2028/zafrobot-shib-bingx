import os
import asyncio
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from kucoin.client import Client

# ‚Äî Cargar variables de entorno ‚Äî
load_dotenv()
API_KEY            = os.getenv("API_KEY")
SECRET_KEY         = os.getenv("SECRET_KEY")
API_PASSPHRASE     = os.getenv("API_PASSPHRASE")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
# Aseg√∫rate de que CHAT_ID sea entero
try:
    CHAT_ID = int(os.getenv("CHAT_ID", "0"))
except ValueError:
    CHAT_ID = 0

# ‚Äî Configurar logging ‚Äî
logging.basicConfig(level=logging.INFO)

# ‚Äî Inicializar clientes ‚Äî
client = Client(API_KEY, SECRET_KEY, API_PASSPHRASE)  # KuCoin Spot
bot    = Bot(token=TELEGRAM_BOT_TOKEN)
dp     = Dispatcher()

# ‚Äî Estado global ‚Äî
bot_running = False
scan_task   = None

# ‚Äî Teclado de men√∫ ‚Äî
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üöÄ Encender Bot"), KeyboardButton(text="üõë Apagar Bot")],
        [KeyboardButton(text="üìä Estado del Bot"), KeyboardButton(text="üí∞ Actualizar Saldo")],
        [KeyboardButton(text="üõ†Ô∏è Debug Balances")]
    ],
    resize_keyboard=True
)

# ‚Äî Handlers ‚Äî
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    global bot_running
    bot_running = False
    await message.answer(
        "‚úÖ *ZafroBot Scalper PRO V1* iniciado.\nSelecciona una opci√≥n:",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

def get_usdt_balance() -> float:
    """Suma el USDT disponible en todas tus cuentas Spot."""
    try:
        accounts = client.get_accounts()
        total = 0.0
        for acc in accounts:
            if acc.get("currency") == "USDT":
                total += float(acc.get("available", 0))
        return total
    except Exception as e:
        logging.error(f"Error obteniendo saldo: {e}")
        return 0.0

async def market_scan(chat_id: int):
    """Env√≠a un mensaje cada 30 s con tu balance o advertencia."""
    global bot_running
    while bot_running:
        balance = get_usdt_balance()
        if balance < 5:
            await bot.send_message(chat_id, f"‚ö†Ô∏è Saldo insuficiente: {balance:.2f} USDT. Esperando‚Ä¶")
        else:
            await bot.send_message(chat_id, f"üîé Escaneando mercado con {balance:.2f} USDT disponibles‚Ä¶")
        await asyncio.sleep(30)

@dp.message(lambda m: m.text == "üöÄ Encender Bot")
async def cmd_turn_on(message: types.Message):
    global bot_running, scan_task
    if not bot_running:
        bot_running = True
        await message.answer("üü¢ Bot encendido. Iniciando escaneo de mercado‚Ä¶")
        scan_task = asyncio.create_task(market_scan(message.chat.id))
    else:
        await message.answer("‚ö†Ô∏è El bot ya est√° encendido.")

@dp.message(lambda m: m.text == "üõë Apagar Bot")
async def cmd_turn_off(message: types.Message):
    global bot_running, scan_task
    if bot_running:
        bot_running = False
        if scan_task:
            scan_task.cancel()
            scan_task = None
        await message.answer("üî¥ Bot apagado. Operaciones detenidas.")
    else:
        await message.answer("‚ö†Ô∏è El bot ya est√° apagado.")

@dp.message(lambda m: m.text == "üìä Estado del Bot")
async def cmd_status(message: types.Message):
    state = "üü¢ Encendido" if bot_running else "üî¥ Apagado"
    await message.answer(f"üìä Estado actual del bot: {state}")

@dp.message(lambda m: m.text == "üí∞ Actualizar Saldo")
async def cmd_update_balance(message: types.Message):
    balance = get_usdt_balance()
    await message.answer(f"üí∞ Saldo disponible: {balance:.2f} USDT")

@dp.message(lambda m: m.text == "üõ†Ô∏è Debug Balances")
async def cmd_debug_balances(message: types.Message):
    try:
        accounts = client.get_accounts()
        lines = [
            f"{acc['currency']} ({acc['type']}): available={acc['available']}"
            for acc in accounts if acc.get("currency") == "USDT"
        ]
        text = "\n".join(lines) if lines else "No hay USDT en ninguna cuenta."
    except Exception as e:
        text = f"Error al debuguear balances: {e}"
    await message.answer(f"üîß Debug USDT:\n{text}")

# ‚Äî Punto de entrada ‚Äî
async def main():
    # Elimina cualquier webhook previo para evitar conflictos
    await bot.delete_webhook(drop_pending_updates=True)
    # Inicia polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())