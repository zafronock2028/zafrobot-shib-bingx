import os
import logging
import asyncio
import json
from datetime import datetime, timedelta
from decimal import Decimal
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from kucoin.client import Trade, Market, User
from dotenv import load_dotenv

# Configuraci√≥n inicial
load_dotenv()

# Logger profesional
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler('trading_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("KuCoinLowBalanceBot")

# Configuraci√≥n de entorno
API_KEY = os.getenv("API_KEY")
SECRET_KEY = os.getenv("SECRET_KEY")
API_PASSPHRASE = os.getenv("API_PASSPHRASE")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# Clientes KuCoin
market = Market(key=API_KEY, secret=SECRET_KEY, passphrase=API_PASSPHRASE)
trade = Trade(key=API_KEY, secret=SECRET_KEY, passphrase=API_PASSPHRASE)
user = User(key=API_KEY, secret=SECRET_KEY, passphrase=API_PASSPHRASE)
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# Pares optimizados para saldos peque√±os (~$35)
PARES = [
    "SHIB-USDT", "PEPE-USDT", "FLOKI-USDT", "DOGE-USDT",
    "SUI-USDT", "TURBO-USDT", "BONK-USDT"
]

# Configuraci√≥n ajustada para saldos peque√±os
PARES_CONFIG = {
    "SHIB-USDT": {"inc": 1000, "min": 50000, "volatilidad": 1.8},
    "PEPE-USDT": {"inc": 100, "min": 5000, "volatilidad": 2.0},
    "FLOKI-USDT": {"inc": 100, "min": 5000, "volatilidad": 1.9},
    "DOGE-USDT": {"inc": 1, "min": 5, "volatilidad": 1.5},
    "SUI-USDT": {"inc": 0.01, "min": 0.05, "volatilidad": 1.3},
    "TURBO-USDT": {"inc": 100, "min": 5000, "volatilidad": 2.2},
    "BONK-USDT": {"inc": 1000, "min": 50000, "volatilidad": 2.1}
}

CONFIG = {
    "uso_saldo": 0.90,           # Usamos el 90% del saldo disponible
    "max_operaciones": 2,        # M√°ximo 2 operaciones simult√°neas
    "puntaje_minimo": 2.0,       # Puntaje m√≠nimo m√°s flexible
    "reanalisis_segundos": 10,   # Intervalo de an√°lisis m√°s largo
    "max_duracion_minutos": 5,   # Duraci√≥n m√°xima reducida
    "spread_maximo": 0.0025,     # Spread m√°ximo permitido (0.25%)
    "saldo_minimo": 5.00         # M√≠nimo USDT requerido por operaci√≥n
}

# Variables globales
operaciones_activas = []
historial_operaciones = []
bot_activo = False
lock = asyncio.Lock()

# Cargar historial al iniciar
try:
    with open('historial_operaciones.json', 'r') as f:
        historial_operaciones = json.load(f)
except:
    historial_operaciones = []

async def guardar_historial():
    """Guarda el historial de operaciones en un archivo JSON"""
    try:
        with open('historial_operaciones.json', 'w') as f:
            json.dump(historial_operaciones, f, indent=2)
    except Exception as e:
        logger.error(f"Error guardando historial: {e}")

async def obtener_saldo():
    """Obtiene el saldo disponible en USDT con verificaci√≥n de m√≠nimo"""
    try:
        cuentas = user.get_account_list()
        usdt = next(c for c in cuentas if c["currency"] == "USDT" and c["type"] == "trade")
        saldo = float(usdt["balance"])
        logger.info(f"Saldo obtenido: {saldo:.2f} USDT")
        
        if saldo < CONFIG["saldo_minimo"]:
            await bot.send_message(
                CHAT_ID,
                f"‚ö†Ô∏è *SALDO MUY BAJO* ‚ö†Ô∏è\n\n"
                f"Saldo actual: `{saldo:.2f} USDT`\n"
                f"M√≠nimo recomendado: `{CONFIG['saldo_minimo']:.2f} USDT`\n\n"
                f"_Deposita m√°s fondos para operar adecuadamente._",
                parse_mode="Markdown"
            )
        return saldo
    except Exception as e:
        logger.error(f"Error obteniendo saldo: {e}")
        await bot.send_message(CHAT_ID, f"‚ö†Ô∏è Error obteniendo saldo: {e}")
        return 0.0

async def analizar_impulso(par):
    """Analiza el impulso del mercado para un par espec√≠fico"""
    try:
        # Obtener datos de mercado
        velas = market.get_kline(symbol=par, kline_type="1min", limit=4)
        if not velas or len(velas) < 4:
            return None
            
        precios = [float(v[2]) for v in velas]  # Precios de cierre
        volumen_24h = float(market.get_24h_stats(par)["volValue"])
        ticker = market.get_ticker(par)
        spread_actual = (float(ticker["bestAsk"]) - float(ticker["bestBid"])) / float(ticker["bestAsk"])
        
        # An√°lisis t√©cnico para saldos peque√±os
        velas_positivas = sum(1 for i in range(1, len(precios)) if precios[i] > precios[i-1] * 1.0015)  # Subida > 0.15%
        momentum = (precios[-1] - precios[-3]) / precios[-3]  # Momentum de 3 velas
        volatilidad = PARES_CONFIG[par].get("volatilidad", 1.5)
        
        # C√°lculo de puntaje ajustado
        puntaje = (
            (velas_positivas * 0.5) + 
            (momentum * 2.0) + 
            (min(volumen_24h, 2_000_000) / 1_500_000) +  # Cap volumen a 2M
            (volatilidad * 0.7) -
            (spread_actual * 400)  # Penaliza spreads altos
        )
        
        return {
            "par": par,
            "precio": precios[-1],
            "puntaje": puntaje,
            "volumen": volumen_24h,
            "spread": spread_actual,
            "min_required": PARES_CONFIG[par]["min"] * precios[-1]  # M√≠nimo requerido en USDT
        }
    except Exception as e:
        logger.error(f"Error analizando {par}: {e}")
        return None

async def ejecutar_compra(par, precio, monto_usdt):
    """Ejecuta una orden de compra con validaci√≥n para saldos peque√±os"""
    try:
        config_par = PARES_CONFIG.get(par)
        if not config_par:
            logger.error(f"Configuraci√≥n no encontrada para {par}")
            return False

        # Verificar spread primero
        ticker = market.get_ticker(par)
        spread = (float(ticker["bestAsk"]) - float(ticker["bestBid"])) / float(ticker["bestAsk"])
        if spread > CONFIG["spread_maximo"]:
            logger.warning(f"Spread alto {spread*100:.2f}% en {par}, omitiendo")
            return False

        # Calcular tama√±o de orden
        inc = Decimal(str(config_par["inc"]))
        minsize = Decimal(str(config_par["min"]))
        size = (Decimal(monto_usdt) / Decimal(precio)).quantize(inc)
        
        # Verificar m√≠nimo requerido
        min_required = float(minsize) * precio
        if monto_usdt < min_required:
            logger.warning(f"Saldo insuficiente para {par}. Necesitas {min_required:.2f} USDT, tienes {monto_usdt:.2f}")
            await bot.send_message(
                CHAT_ID,
                f"‚ö†Ô∏è *SALDO INSUFICIENTE* ‚ö†Ô∏è\n\n"
                f"‚Ä¢ Par: `{par}`\n"
                f"‚Ä¢ M√≠nimo requerido: `{min_required:.2f} USDT`\n"
                f"‚Ä¢ Saldo asignado: `{monto_usdt:.2f} USDT`\n\n"
                f"_Considera depositar m√°s fondos o elegir otro par._",
                parse_mode="Markdown"
            )
            return False

        # Ejecutar orden
        order = trade.create_market_order(par, "buy", size=str(size))
        order_id = order["orderId"]
        
        # Registrar operaci√≥n
        op = {
            "id": order_id,
            "par": par,
            "entrada": float(precio),
            "cantidad": float(size),
            "maximo": float(precio),
            "entrada_dt": datetime.now().isoformat(),
            "monto_usdt": float(monto_usdt),
            "estado": "activa",
            "spread_inicial": spread
        }
        
        operaciones_activas.append(op)
        
        # Notificaci√≥n detallada
        await bot.send_message(
            CHAT_ID,
            f"üü¢ *COMPRA EJECUTADA* üü¢\n\n"
            f"‚Ä¢ Par: `{par}`\n"
            f"‚Ä¢ Precio: `{precio:.8f}`\n"
            f"‚Ä¢ Monto: `{monto_usdt:.2f} USDT`\n"
            f"‚Ä¢ Cantidad: `{float(size):.2f}`\n"
            f"‚Ä¢ M√≠nimo requerido: `{min_required:.2f} USDT`\n"
            f"‚Ä¢ Spread inicial: `{spread*100:.2f}%`\n"
            f"‚Ä¢ Hora: `{datetime.now().strftime('%H:%M:%S')}`\n\n"
            f"üìä _Iniciando trailing stop..._",
            parse_mode="Markdown"
        )
        
        # Iniciar trailing stop
        asyncio.create_task(trailing_stop(op))
        return True
        
    except Exception as e:
        logger.error(f"Error en compra {par}: {str(e)}")
        await bot.send_message(
            CHAT_ID,
            f"‚ùå *ERROR EN COMPRA* ‚ùå\n\n"
            f"‚Ä¢ Par: `{par}`\n"
            f"‚Ä¢ Error: `{str(e)}`\n\n"
            f"_Reintentando en pr√≥ximo ciclo..._",
            parse_mode="Markdown"
        )
        return False

async def trailing_stop(op):
    """Trailing stop optimizado para saldos peque√±os"""
    par = op["par"]
    entrada_dt = datetime.fromisoformat(op["entrada_dt"])
    max_duracion = timedelta(minutes=CONFIG["max_duracion_minutos"])
    volatilidad = PARES_CONFIG[par].get("volatilidad", 1.5)
    
    while bot_activo and op in operaciones_activas:
        try:
            # Verificar timeout
            if datetime.now() - entrada_dt > max_duracion:
                logger.info(f"Timeout alcanzado para {par}")
                await ejecutar_venta(op, "timeout")
                break
                
            # Obtener precio actual
            ticker = market.get_ticker(par)
            precio_actual = float(ticker["price"])
            spread_actual = (float(ticker["bestAsk"]) - float(ticker["bestBid"])) / float(ticker["bestAsk"])
            
            # Actualizar m√°ximo
            if precio_actual > op["maximo"]:
                op["maximo"] = precio_actual
            
            # Calcular m√©tricas
            ganancia_pct = (precio_actual - op["entrada"]) / op["entrada"] * 100
            retroceso_pct = (op["maximo"] - precio_actual) / op["maximo"] * 100
            
            # Condiciones de salida ajustadas para saldos peque√±os
            if ganancia_pct >= 1.8 * volatilidad and retroceso_pct >= 1.0 * volatilidad:
                await ejecutar_venta(op, "take_profit_2x")
                break
            elif ganancia_pct >= 1.2 * volatilidad and retroceso_pct >= 0.7 * volatilidad:
                await ejecutar_venta(op, "take_profit_1.5x")
                break
            elif ganancia_pct >= 0.8 * volatilidad and retroceso_pct >= 0.4 * volatilidad:
                await ejecutar_venta(op, "take_profit_1x")
                break
            elif spread_actual > CONFIG["spread_maximo"] * 1.5:  # Spread aumenta 50%
                await ejecutar_venta(op, "spread_alto")
                break
                
            await asyncio.sleep(3)
            
        except Exception as e:
            logger.error(f"Error en trailing stop {par}: {str(e)}")
            await asyncio.sleep(5)

async def ejecutar_venta(op, razon):
    """Ejecuta la venta y registra los resultados"""
    try:
        par = op["par"]
        ticker = market.get_ticker(par)
        precio_venta = float(ticker["price"])
        spread_actual = (float(ticker["bestAsk"]) - float(ticker["bestBid"])) / float(ticker["bestAsk"])
        
        # Ejecutar orden de venta
        trade.create_market_order(par, "sell", size=str(Decimal(str(op["cantidad"]))))
        
        # Calcular m√©tricas
        ganancia_usdt = (precio_venta - op["entrada"]) * op["cantidad"]
        rentabilidad_pct = (precio_venta - op["entrada"]) / op["entrada"] * 100
        duracion = (datetime.now() - datetime.fromisoformat(op["entrada_dt"])).total_seconds() / 60
        
        # Actualizar operaci√≥n
        op.update({
            "salida": precio_venta,
            "salida_dt": datetime.now().isoformat(),
            "ganancia_usdt": ganancia_usdt,
            "rentabilidad_pct": rentabilidad_pct,
            "duracion_min": duracion,
            "razon_salida": razon,
            "spread_final": spread_actual,
            "estado": "cerrada"
        })
        
        # Mover a historial
        operaciones_activas.remove(op)
        historial_operaciones.append(op)
        await guardar_historial()
        
        # Preparar mensaje
        razones = {
            "timeout": "‚è∞ Tiempo m√°ximo alcanzado",
            "take_profit_1x": "üéØ Take Profit 1X (0.8%)",
            "take_profit_1.5x": "üéØ Take Profit 1.5X (1.2%)",
            "take_profit_2x": "üéØ Take Profit 2X (1.8%)",
            "spread_alto": "üìâ Spread demasiado alto"
        }
        
        emoji = "üü¢" if ganancia_usdt >= 0 else "üî¥"
        mensaje = (
            f"{emoji} *VENTA EJECUTADA* {emoji}\n\n"
            f"‚Ä¢ Par: `{par}`\n"
            f"‚Ä¢ Entrada: `{op['entrada']:.8f}`\n"
            f"‚Ä¢ Salida: `{precio_venta:.8f}`\n"
            f"‚Ä¢ Cantidad: `{op['cantidad']:.2f}`\n"
            f"‚Ä¢ Ganancia: `{ganancia_usdt:.4f} USDT`\n"
            f"‚Ä¢ Rentabilidad: `{rentabilidad_pct:.2f}%`\n"
            f"‚Ä¢ Duraci√≥n: `{duracion:.1f} minutos`\n"
            f"‚Ä¢ Raz√≥n: `{razones.get(razon, razon)}`\n"
            f"‚Ä¢ Spread final: `{spread_actual*100:.2f}%`\n\n"
            f"üìä _Actualizando historial..._"
        )
        
        await bot.send_message(CHAT_ID, mensaje, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error vendiendo {op['par']}: {str(e)}")
        await bot.send_message(
            CHAT_ID,
            f"‚ùå *ERROR EN VENTA* ‚ùå\n\n"
            f"‚Ä¢ Par: `{op['par']}`\n"
            f"‚Ä¢ Error: `{str(e)}`\n\n"
            f"‚ö†Ô∏è _Intentando nuevamente..._",
            parse_mode="Markdown"
        )

async def ciclo_trading():
    """Ciclo principal de trading optimizado para saldos peque√±os"""
    await asyncio.sleep(10)  # Espera inicial m√°s corta
    
    while bot_activo:
        try:
            async with lock:
                # Verificar l√≠mite de operaciones
                if len(operaciones_activas) >= CONFIG["max_operaciones"]:
                    await asyncio.sleep(CONFIG["reanalisis_segundos"])
                    continue
                    
                # Obtener saldo
                saldo = await obtener_saldo()
                if saldo < CONFIG["saldo_minimo"]:
                    await asyncio.sleep(30)  # Espera m√°s larga si saldo es muy bajo
                    continue
                    
                # Calcular monto por operaci√≥n
                ops_disponibles = max(1, CONFIG["max_operaciones"] - len(operaciones_activas))
                monto_por_op = (saldo * CONFIG["uso_saldo"]) / ops_disponibles
                
                # Analizar pares disponibles
                ya_usados = [op["par"] for op in operaciones_activas]
                candidatos = []
                
                for par in PARES:
                    if par in ya_usados:
                        continue
                        
                    analisis = await analizar_impulso(par)
                    if analisis and analisis["puntaje"] >= CONFIG["puntaje_minimo"]:
                        # Verificar que tenemos suficiente saldo para este par
                        if monto_por_op >= analisis["min_required"] * 1.1:  # 10% de margen
                            candidatos.append(analisis)
                
                if not candidatos:
                    await asyncio.sleep(CONFIG["reanalisis_segundos"])
                    continue
                
                # Seleccionar mejor oportunidad con saldo suficiente
                mejor = max(candidatos, key=lambda x: x["puntaje"])
                
                # Ejecutar compra si tenemos saldo suficiente
                if monto_por_op >= mejor["min_required"]:
                    if not await ejecutar_compra(mejor["par"], mejor["precio"], monto_por_op):
                        await asyncio.sleep(3)
                
            await asyncio.sleep(CONFIG["reanalisis_segundos"])
            
        except Exception as e:
            logger.error(f"Error en ciclo trading: {str(e)}")
            await bot.send_message(
                CHAT_ID,
                f"‚ö†Ô∏è *ERROR EN CICLO TRADING* ‚ö†Ô∏è\n\n"
                f"`{str(e)}`\n\n"
                f"_Reintentando en 15 segundos..._",
                parse_mode="Markdown"
            )
            await asyncio.sleep(15)

def crear_teclado():
    """Crea el teclado interactivo de Telegram"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöÄ Iniciar Bot Trading"), KeyboardButton(text="‚õî Detener Bot Trading")],
            [KeyboardButton(text="üí∞ Saldo USDT"), KeyboardButton(text="üìä Operaciones Activas")],
            [KeyboardButton(text="üìà Historial Operaciones"), KeyboardButton(text="üìâ Rendimiento Diario")],
            [KeyboardButton(text="‚öôÔ∏è Configuraci√≥n"), KeyboardButton(text="‚ùì Ayuda")]
        ],
        resize_keyboard=True,
        input_field_placeholder="Selecciona una opci√≥n..."
    )

@dp.message(Command("start", "help"))
async def start_cmd(msg: types.Message):
    """Mensaje de inicio/ayuda optimizado"""
    await msg.answer(
        "ü§ñ *Bot de Trading KuCoin - Versi√≥n Saldo Peque√±o* ü§ñ\n\n"
        "üîπ *Saldo actual:* ~$35 USDT\n"
        "üîπ *Pares disponibles:* 7 (optimizados para bajo capital)\n"
        "üîπ *Estrategia:* Impulso con gesti√≥n de riesgo ajustada\n\n"
        "üìå *Comandos principales:*\n"
        "- üöÄ Iniciar: Activa el trading (m√°x 2 operaciones)\n"
        "- ‚õî Detener: Pausa nuevas operaciones\n"
        "- üí∞ Saldo: Muestra tu balance actual\n"
        "- üìä Operaciones: Muestra trades activos con P&L\n\n"
        "‚ö†Ô∏è *Aviso importante:* Con saldos peque√±os:\n"
        "- Los spreads afectan m√°s tu rentabilidad\n"
        "- Algunos pares pueden no estar disponibles\n"
        "- Considera depositar m√°s fondos cuando puedas",
        reply_markup=crear_teclado(),
        parse_mode="Markdown"
    )

@dp.message()
async def comandos(msg: types.Message):
    """Maneja todos los comandos del teclado"""
    global bot_activo
    
    if msg.text == "üöÄ Iniciar Bot Trading":
        if not bot_activo:
            bot_activo = True
            asyncio.create_task(ciclo_trading())
            saldo = await obtener_saldo()
            await msg.answer(
                "‚úÖ *Bot de trading ACTIVADO* ‚úÖ\n\n"
                f"‚Ä¢ Saldo disponible: `{saldo:.2f} USDT`\n"
                f"‚Ä¢ Monto por operaci√≥n: `{(saldo * CONFIG['uso_saldo']) / CONFIG['max_operaciones']:.2f} USDT`\n"
                f"‚Ä¢ M√°x. operaciones simult√°neas: `{CONFIG['max_operaciones']}`\n\n"
                "_Buscando oportunidades..._",
                parse_mode="Markdown"
            )
        else:
            await msg.answer("‚ÑπÔ∏è El bot ya est√° en funcionamiento")

    elif msg.text == "‚õî Detener Bot Trading":
        if bot_activo:
            bot_activo = False
            await msg.answer(
                "üî¥ *Bot de trading DETENIDO* üî¥\n\n"
                "üõë No se realizar√°n nuevas operaciones.\n"
                f"üìâ Operaciones activas: `{len(operaciones_activas)}`\n\n"
                "_Los trailing stops seguir√°n activos._",
                parse_mode="Markdown"
            )
        else:
            await msg.answer("‚ÑπÔ∏è El bot ya est√° detenido")

    elif msg.text == "üí∞ Saldo USDT":
        saldo = await obtener_saldo()
        invertido = sum(op['cantidad'] * op['entrada'] for op in operaciones_activas)
        saldo_total = saldo + invertido
        
        await msg.answer(
            f"üíµ *Balance Actual* üíµ\n\n"
            f"‚Ä¢ üí∞ Disponible: `{saldo:.2f} USDT`\n"
            f"‚Ä¢ üìä Invertido: `{invertido:.2f} USDT`\n"
            f"‚Ä¢ üè¶ Total: `{saldo_total:.2f} USDT`\n"
            f"‚Ä¢ üìà Operaciones activas: `{len(operaciones_activas)}`\n\n"
            f"üí° _Consejo: Para mejor rendimiento, considera llegar a al menos $100 USDT_",
            parse_mode="Markdown"
        )

    elif msg.text == "üìä Operaciones Activas":
        if not operaciones_activas:
            await msg.answer(
                "üü¢ *Sin operaciones activas* üü¢\n\n"
                "_El bot est√° analizando el mercado..._",
                parse_mode="Markdown"
            )
        else:
            texto = "üìä *Operaciones en Curso* üìä\n\n"
            for op in operaciones_activas:
                try:
                    ticker = market.get_ticker(op['par'])
                    precio_actual = float(ticker["price"])
                    ganancia_pct = (precio_actual - op['entrada']) / op['entrada'] * 100
                    ganancia_usdt = (precio_actual - op['entrada']) * op['cantidad']
                    emoji = "üü¢" if ganancia_pct >= 0 else "üî¥"
                    duracion = (datetime.now() - datetime.fromisoformat(op['entrada_dt'])).total_seconds() / 60
                    
                    texto += (
                        f"{emoji} *{op['par']}* {emoji}\n"
                        f"‚Ä¢ üéØ Entrada: `{op['entrada']:.8f}`\n"
                        f"‚Ä¢ üìà Actual: `{precio_actual:.8f}`\n"
                        f"‚Ä¢ üìä Rentabilidad: `{ganancia_pct:.2f}%`\n"
                        f"‚Ä¢ üí∞ Ganancia: `{ganancia_usdt:.4f} USDT`\n"
                        f"‚Ä¢ ‚è± Duraci√≥n: `{duracion:.1f} min`\n\n"
                    )
                except Exception as e:
                    logger.error(f"Error obteniendo datos para {op['par']}: {e}")
                    texto += f"‚ö†Ô∏è Error obteniendo datos para {op['par']}\n\n"
            
            await msg.answer(texto, parse_mode="Markdown")

    elif msg.text == "üìà Historial Operaciones":
        if not historial_operaciones:
            await msg.answer(
                "üì≠ *Historial vac√≠o* üì≠\n\n"
                "_A√∫n no se han completado operaciones._",
                parse_mode="Markdown"
            )
        else:
            ultimas_operaciones = sorted(historial_operaciones, key=lambda x: x['salida_dt'], reverse=True)[:3]
            
            texto = "üìà *√öltimas Operaciones* üìà\n\n"
            total_ganado = 0
            ops_positivas = 0
            
            for op in ultimas_operaciones:
                emoji = "üü¢" if op['ganancia_usdt'] >= 0 else "üî¥"
                if op['ganancia_usdt'] >= 0:
                    ops_positivas += 1
                    total_ganado += op['ganancia_usdt']
                
                razones = {
                    "timeout": "‚è∞ Timeout",
                    "take_profit_1x": "üéØ TP 0.8%",
                    "take_profit_1.5x": "üéØ TP 1.2%",
                    "take_profit_2x": "üéØ TP 1.8%",
                    "spread_alto": "üìâ Spread alto"
                }
                
                texto += (
                    f"{emoji} *{op['par']}* {emoji}\n"
                    f"‚Ä¢ üéØ Entrada: `{op['entrada']:.8f}`\n"
                    f"‚Ä¢ ÔøΩ Salida: `{op['salida']:.8f}`\n"
                    f"‚Ä¢ üìä Rentabilidad: `{op['rentabilidad_pct']:.2f}%`\n"
                    f"‚Ä¢ üí∞ Ganancia: `{op['ganancia_usdt']:.4f} USDT`\n"
                    f"‚Ä¢ ‚è± Duraci√≥n: `{op['duracion_min']:.1f} min`\n"
                    f"‚Ä¢ üõë Raz√≥n: `{razones.get(op['razon_salida'], op['razon_salida'])}`\n\n"
                )
            
            total_ops = len(historial_operaciones)
            porcentaje_exito = (ops_positivas / total_ops * 100) if total_ops > 0 else 0
            
            texto += (
                "üìä *Estad√≠sticas* üìä\n"
                f"‚Ä¢ üìÖ Total operaciones: `{total_ops}`\n"
                f"‚Ä¢ ‚úÖ Operaciones positivas: `{ops_positivas}` (`{porcentaje_exito:.1f}%`)\n"
                f"‚Ä¢ üíµ Ganancia total: `{total_ganado:.4f} USDT`\n"
                f"‚Ä¢ üìå Promedio/op: `{(total_ganado/total_ops):.4f} USDT`" if total_ops > 0 else ""
            )
            
            await msg.answer(texto, parse_mode="Markdown")

    elif msg.text == "üìâ Rendimiento Diario":
        hoy = datetime.now().date()
        ops_hoy = [op for op in historial_operaciones 
                  if datetime.fromisoformat(op['salida_dt']).date() == hoy]
        
        if not ops_hoy:
            await msg.answer(
                f"üìÖ *Rendimiento {hoy.strftime('%d/%m/%Y')}* üìÖ\n\n"
                "_No hay operaciones hoy a√∫n._",
                parse_mode="Markdown"
            )
        else:
            ganancia_total = sum(op['ganancia_usdt'] for op in ops_hoy)
            ops_positivas = sum(1 for op in ops_hoy if op['ganancia_usdt'] >= 0)
            
            await msg.answer(
                f"üìÖ *Rendimiento {hoy.strftime('%d/%m/%Y')}* üìÖ\n\n"
                f"‚Ä¢ üìä Operaciones: `{len(ops_hoy)}`\n"
                f"‚Ä¢ ‚úÖ Positivas: `{ops_positivas}` (`{ops_positivas/len(ops_hoy)*100:.1f}%`)\n"
                f"‚Ä¢ üí∞ Ganancia: `{ganancia_total:.4f} USDT`\n"
                f"‚Ä¢ üìå Promedio: `{ganancia_total/len(ops_hoy):.4f} USDT`\n\n"
                f"üìà _Resumen:_\n"
                f"`{'üü¢' * ops_positivas}{'üî¥' * (len(ops_hoy) - ops_positivas)}`",
                parse_mode="Markdown"
            )

    elif msg.text == "‚öôÔ∏è Configuraci√≥n":
        await msg.answer(
            f"‚öôÔ∏è *Configuraci√≥n Actual* ‚öôÔ∏è\n\n"
            f"‚Ä¢ üìä Pares activos: `{len(PARES)}`\n"
            f"‚Ä¢ üè∑ M√°x. operaciones: `{CONFIG['max_operaciones']}`\n"
            f"‚Ä¢ üí∞ % Saldo usado: `{CONFIG['uso_saldo']*100:.0f}%`\n"
            f"‚Ä¢ üìà Puntaje m√≠nimo: `{CONFIG['puntaje_minimo']}`\n"
            f"‚Ä¢ ‚è± Intervalo an√°lisis: `{CONFIG['reanalisis_segundos']} seg`\n"
            f"‚Ä¢ üïí Duraci√≥n m√°xima: `{CONFIG['max_duracion_minutos']} min`\n"
            f"‚Ä¢ üìâ Spread m√°ximo: `{CONFIG['spread_maximo']*100:.2f}%`\n\n"
            f"_Configuraci√≥n optimizada para saldo de ~$35 USDT_",
            parse_mode="Markdown"
        )

    elif msg.text == "‚ùì Ayuda":
        await start_cmd(msg)

async def iniciar_bot():
    """Inicia el bot de Telegram"""
    await dp.start_polling(bot)

if __name__ == "__main__":
    logger.info("Iniciando KuCoin Low Balance Trading Bot")
    try:
        asyncio.run(iniciar_bot())
    except KeyboardInterrupt:
        logger.info("Bot detenido manualmente")
    except Exception as e:
        logger.error(f"Error fatal: {str(e)}")
    finally:
        logger.info("Guardando historial antes de salir...")
        asyncio.run(guardar_historial())